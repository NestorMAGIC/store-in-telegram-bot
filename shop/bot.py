from aiogram import Bot, Dispatcher, executor, types
from aiogram.types.message import ContentType

from config import *
from messages import *
from db import Database
from markups import *

import random
import time

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
db = Database()



# < --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start --- >



@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):

    if not db.get_user(message.from_user.id): # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç –≤ –ë–î
        db.add_user(message.from_user.id)

    with open('img/shulker_store.jpg', 'rb') as photo:
        await bot.send_photo(
            message.from_user.id,
            photo,
            caption=START_TEXT,
            reply_markup=kb,
            parse_mode='HTML',
        )



# < --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π --- >



@dp.message_handler()
async def menu_command(message: types.Message):

    spam = False

    if message.text == '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üë§':
        await message.answer(SUPPORT_TEXT, parse_mode='HTML')
        
    elif message.text == '–¢–æ–≤–∞—Ä—ã üè¶': 

        await bot.send_message(
            chat_id=message.from_user.id,
            text='<em>–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤</em>',
            reply_markup=cats_ikb(),
            parse_mode='HTML',
        )

    elif message.text == '–ì–∞—Ä–∞–Ω—Ç–∏—è ‚úîÔ∏è':
        await message.answer(text=RULES_TEXT, parse_mode='HTML')   

    elif message.text == '–ü—Ä–æ–º–æ–∫–æ–¥ ‚úâÔ∏è' and db.get_user_code_status(message.from_user.id) == False: # –ï—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ—Ç
        await bot.send_message(
            chat_id=message.from_user.id,
            text='<em>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:</em>',
            parse_mode='HTML',
        )

    elif message.text == '–ü—Ä–æ–º–æ–∫–æ–¥ ‚úâÔ∏è' and db.get_user_code_status(message.from_user.id) == True: # –ï—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –µ—Å—Ç—å

        user = db.get_user_by_user_id(message.from_user.id)

        await bot.send_message(
            chat_id=message.from_user.id,
            text=f'<em>–ö –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥ <b>{user["code"]}</b></em>',
            parse_mode='HTML',
        )   

    # –ü—Ä–∏–µ–º –ø—Ä–æ–º–æ–∫–æ–¥–∞ 

    codes = db.get_codes()

    for code in codes:
        if message.text.upper() == code['code'] and db.get_user_code_status(message.from_user.id) == False: # –ï—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ—Ç

            db.set_code(message.from_user.id, code['code'])

            await bot.send_message(
                chat_id=message.from_user.id,
                text=f'<em>–°–∫–∏–¥–∫–∞ –≤ <b>{code["discount"]}%</b> –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É <b>{code["code"]}</b> –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ ü•∞</em>',
                parse_mode='HTML',
            ) 



# < --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–ª–∞—Ç—ã --- >



@dp.callback_query_handler(text_contains='remove_order')
async def menu_callback(cb: types.CallbackQuery):

    order_id = cb.data[13:]
    order = db.get_order_by_id(order_id)

    db.delete_order(order_id)  
    db.item_in_stock(order['item_id'])

    await bot.delete_message(cb.from_user.id, cb.message.message_id)



# < --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–ø–ª–∞—Ç—ã --- >



@dp.callback_query_handler(text_contains='start_pay')
async def menu_callback(cb: types.CallbackQuery):

    item_id = cb.data[10:]
    item = db.get_item_by_id(item_id)
    user_id = cb.from_user.id
    order_id = user_id+random.randint(10001, 99999)
    item_cat = db.get_cat(item['cat'])
    price = item_cat['price']
    
    if db.get_user_code_status(user_id) == True: # –ï—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥

        user = db.get_user_by_user_id(user_id)       
        code = db.get_code(user['code'])
        discount = code['discount']

        endprice = price - int((float(price) / 100) * discount)

    else:
        endprice = price

    db.item_in_proccess(item_id)

    order = {
        'order_id': order_id,
        'user_id': user_id, 
        'item_id': item_id,  
        'oldprice': price,              
        'price': endprice,    
        'status': 'in proccess',
        'item_cat': item['cat'],
        'lifetime': int(time.time()) + (1 * 60),        
    }

    db.add_order(
        order['order_id'], 
        order['user_id'], 
        order['item_id'],         
        order['price'], 
        order['oldprice'],
        order['status'],
        order['item_cat'],
        order['lifetime'],
    )

    await bot.send_message(
        chat_id=cb.from_user.id,
        text=order_text(order),
        parse_mode='HTML',
        reply_markup=pay_ikb(order['order_id']),
    )   



# < --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã --- >



@dp.callback_query_handler(text_contains='pay')
async def menu_callback(cb: types.CallbackQuery):

    # –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –Æ–∫–∞—Å—Å–∞

    order_id = cb.data[4:]

    order = db.get_order_by_id(order_id)

    try:

        price = order['price']
        amount = str(price)+'00'

        await bot.send_invoice(
            chat_id=cb.from_user.id,
            title="ShulkerStore",
            description=f'‚¨áÔ∏è –û–ø–ª–∞—Ç–∏—Ç–µ —Ç–æ–≤–∞—Ä ‚¨áÔ∏è',
            payload=f'order_id:{order_id}',
            provider_token=YOOTOKEN,
            currency='RUB',
            start_parameter='shop',
            prices=[{
                'label': '—Ä—É–±',
                'amount': int(amount),
            }],
        )

    except:
        await bot.send_message(
            chat_id=cb.from_user.id,
            text='<em>–í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ, –ø–æ–∂–∞–π–ª—É—Å—Ç–∞ –æ–±–Ω–æ–≤–∏—Ç–µ –∑–∞–∫–∞–∑</em>',
            parse_mode='HTML',
        )


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞

@dp.pre_checkout_query_handler()
async def proccess_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):

    order_id = pre_checkout_query['invoice_payload'][9:]

    order = db.get_order_by_id(order_id)

    try:

        if order['status'] == 'in proccess' and db.get_lifetime_status(order_id) == True: # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –µ—Å—Ç—å
            await bot.answer_pre_checkout_query(
                pre_checkout_query.id,
                ok=True
            )
        else: # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç
            await bot.answer_pre_checkout_query(
                pre_checkout_query.id, 
                ok=False, 
                error_message='–§–æ—Ä–º–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ - c –º–æ–º–µ–Ω—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç, –ø–æ–∂–∞–π–ª—É—Å—Ç–∞ –æ–±–Ω–æ–≤–∏—Ç–µ –∑–∞–∫–∞–∑'
            )
    except:
            await bot.answer_pre_checkout_query(
                pre_checkout_query.id, 
                ok=False, 
                error_message='–§–æ—Ä–º–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ - c –º–æ–º–µ–Ω—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç, –ø–æ–∂–∞–π–ª—É—Å—Ç–∞ –æ–±–Ω–æ–≤–∏—Ç–µ –∑–∞–∫–∞–∑'
            )

# –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞

@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def proccess_pay(message: types.Message):

    if 'order_id' in message.successful_payment.invoice_payload:
        order_id = message.successful_payment.invoice_payload[9:]
        order = db.get_order_by_id(order_id)
        item_id = order['item_id']
        item = db.get_item_by_id(item_id)
        user = db.get_user_by_user_id(order['user_id'])

        db.complete_order(order_id)
        db.complete_item(item_id)

        if order['oldprice'] > order['price']:
            discount = order['oldprice'] - order['price']
            db.add_money_code(user['code'], discount)

        await bot.send_message(
            chat_id=message.from_user.id,
            text=send_item(item),
            parse_mode='HTML',
            reply_markup=guide_ikb,
        )



# < --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ª–±—ç–∫–æ–≤ --- >



@dp.callback_query_handler()
async def menu_callback(cb: types.CallbackQuery):
    cats = db.get_all_cat() # –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    for x in range(len(cats)):
        if cb.data == cats[x]['cat']:
            await bot.delete_message(cb.from_user.id, cb.message.message_id)
            
            items = db.get_items_by_cat(cats[x]['cat']) # –í—Å–µ —Ç–æ–≤–∞—Ä—ã –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

            if len(items) > 0:
                item = items[0]

            if items == (): # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç
                await bot.send_message(
                    chat_id=cb.from_user.id,
                    text='–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üòî',
                    reply_markup=start_pay_back_ikb()
                )

            else: # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –µ—Å—Ç—å

                try: # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É —Ç–æ–≤–∞—Ä–∞ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å
                    with open(f'img/{cats[x]["img"]}', 'rb') as photo:
                        await bot.send_photo(
                            cb.from_user.id,
                            photo,
                            caption=item_text(cats[x]),
                            reply_markup=start_pay_ikb(item['id']), # –°—é–¥–∞ item_id
                            parse_mode='HTML',
                        )
                except: # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É —Ç–æ–≤–∞—Ä–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å
                    with open(f'img/shulker_store.jpg', 'rb') as photo: # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
                        await bot.send_photo(
                            cb.from_user.id,
                            photo,
                            caption=item_text(cats[x]),
                            reply_markup=start_pay_ikb(item['id']), # –°—é–¥–∞ item_id
                            parse_mode='HTML',
                        )                   
    
    if cb.data == 'cats': # –ù–∞–∑–∞–¥ –∫–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        await bot.delete_message(cb.from_user.id, cb.message.message_id)

        await bot.send_message(
            chat_id=cb.from_user.id,
            text='<em>–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤</em>',
            reply_markup=cats_ikb(),
            parse_mode='HTML',
        ) 

    if cb.data == 'guide': # –ù–∞–∑–∞–¥ –∫–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º

        await bot.send_message(
            chat_id=cb.from_user.id,
            text=GUIDE_TEXT,
            parse_mode='HTML',
        ) 



# < --- –ó–∞–ø—É—Å–∫ --- >



if __name__ == '__main__':
    executor.start_polling(
        dp,
        skip_updates=True
    )
